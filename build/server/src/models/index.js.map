{"version":3,"sources":["../../../../api/server/src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","console","log","db","sequelize","environment","Sequelize","use_env_variable","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","require","join","DataTypes","name","Object","keys","modelName","associate"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAGC,iBAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AAEA,IAAMC,MAAM,GAAGC,mBAAWJ,GAAX,CAAf;AAEAK,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCN,GAAzC;AAEA,IAAMO,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIL,MAAM,CAACM,WAAP,KAAuB,YAA3B,EAAyC;AACvCD,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACVT,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACQ,gBAAnB,CADU,EAC4BR,MAD5B,CAAZ;AAGAK,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACVT,OAAO,CAACD,GAAR,CAAYY,OADF,EAEVX,OAAO,CAACD,GAAR,CAAYa,OAFF,EAGVZ,OAAO,CAACD,GAAR,CAAYc,OAHF,EAGW;AACrBC,IAAAA,IAAI,EAAEd,OAAO,CAACD,GAAR,CAAYgB,OADG;AAErBC,IAAAA,IAAI,EAAEhB,OAAO,CAACD,GAAR,CAAYkB,OAFG;AAGrBC,IAAAA,OAAO,EAAE,UAHY;AAIrBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE,IADQ;AAEb,gBAAQ;AAFK,KAJM;AAQrBC,IAAAA,OAAO,EAAE;AARY,GAHX,CAAZ;AAcD,CAlBD,MAkBO;AACLd,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACVP,MAAM,CAACoB,QADG,EACOpB,MAAM,CAACqB,QADd,EACwBrB,MAAM,CAACsB,QAD/B,EACyCtB,MADzC,CAAZ;AAGD;;AAEDuB,eACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEU,UAACC,IAAD,EAAU;AAChB,SAAQA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IACJD,IAAI,KAAKjC,QADL,IACmBiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAD7C;AAED,CALH,EAMGC,OANH,CAMW,UAACH,IAAD,EAAU;AACjB,MAAMI,KAAK,GAAGC,OAAO,CAACrC,iBAAKsC,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAD,CAAP,CAAoCtB,SAApC,EAA+CE,sBAAU2B,SAAzD,CAAd;;AACA9B,EAAAA,EAAE,CAAC2B,KAAK,CAACI,IAAP,CAAF,GAAiBJ,KAAjB;AACD,CATH;;AAWAK,MAAM,CAACC,IAAP,CAAYjC,EAAZ,EAAgB0B,OAAhB,CAAwB,UAACQ,SAAD,EAAe;AACrC,MAAIlC,EAAE,CAACkC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BnC,IAAAA,EAAE,CAACkC,SAAD,CAAF,CAAcC,SAAd,CAAwBnC,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport configJson from '../config/config';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\n\nconst config = configJson[env];\n\nconsole.log('this is the environment: ', env);\n\nconst db = {};\n\nlet sequelize;\nif (config.environment === 'production') {\n  sequelize = new Sequelize(\n    process.env[config.use_env_variable], config\n  );\n  sequelize = new Sequelize(\n    process.env.DB_NAME,\n    process.env.DB_USER,\n    process.env.DB_PASS, {\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    dialect: 'postgres',\n    dialectOption: {\n      ssl: true,\n      native: true\n    },\n    logging: true\n  }\n  );\n} else {\n  sequelize = new Sequelize(\n    config.database, config.username, config.password, config\n  );\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter((file) => {\n    return (file.indexOf('.') !== 0) &&\n      (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach((file) => {\n    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;"],"file":"index.js"}